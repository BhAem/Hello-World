#include <stdio.h>
#include <math.h>
int main()
{
	int m, i, k;
 
	printf("请输入一个正整数：");
	scanf("%d", &m);                          //输入一个正整数
 
	k = sqrt(m);
 
	for (i = 2; i <= k; i++)                  //穷举m的可能因子，何时循环结束？
	{
		if (m % i == 0)                       //找到了整数m的一个因子i
		break;
	}                            //结束循环
 
	if (i > k)
		printf("此正整数为一个素数！\n");
	else
		printf("此正整数不是一个素数！\n");
 
 
	return 0;
}


#include<cstdio>
#include<iostream>
using namespace std;
int main()
{
	int n,q,check[100000001]={0};
	int prime[1000001],cnt=0;
	//根据n<=10^8,q<=10^6开对应的数组大小，防止MLE
	//初始将check数组全部标记为0，标0的是素数，标1的不是素数
	scanf("%d%d",&n,&q);
	check[1]=1;//1不是素数
	for(int i=2;i<=n;i++)
	{
		if(!check[i])prime[cnt++]=i;//若当前数i没有被之前的所有数筛掉，表明i是素数，将i添加进素数表prime
		for(int j=0;j<cnt&&i*prime[j]<100000001;j++)//注意i*prime[j]不要超过n的上限（10^8）
		{
			check[i*prime[j]]=1;//将当前素数prime[j]的i倍标记为合数
			if(i%prime[j]==0)break;//关键步骤：保证每个合数只被筛一次,思想是：我们期望 prime[j] 是这个合数的最小质因数,从而起到线性复杂度的作用
		}
	}
	for(int i=1;i<=q;i++)
	{
		scanf("%d",&n);
		printf("%d\n",prime[n-1]);//由于素数表从0开始存，所以输出时下标应减1
	}
	return 0;
}
